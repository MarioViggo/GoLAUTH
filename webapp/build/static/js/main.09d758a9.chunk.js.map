{"version":3,"sources":["pages/signIn/styles.js","helpers/authHeader.js","helpers/Axios.js","components/input/styles.js","components/input/index.js","pages/signIn/index.js","styles/global.js","App.js","serviceWorker.js","index.js"],"names":["Container","styled","main","div","authHeader","localStorage","getItem","Axios","axios","create","baseURL","timeout","headers","httpsAgent","https","Agent","rejectUnauthorized","Input","name","label","type","value","onChange","placeholder","required","disabled","className","style","id","htmlFor","SignIn","useState","email","setEmail","password","setPassword","token","signIn","a","post","then","res","setItem","data","Token","window","location","reload","catch","err","console","log","alert","to","Row","Col","md","e","target","span","offset","onClick","class","createGlobalStyle","App","path","element","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.09d758a9.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.main`\n    padding: 2rem 0;\n    min-height: 100vh;\n`;\n\nexport const Card = styled.div`\n    border: 1px solid red;\n    padding: 1.5rem 1.5rem 3rem;\n    margin-bottom: 1rem;\n    border-radius: 8px;\n    min-height: 12rem;\n    position: relative;\n\n    &:hover {\n        cursor: pointer;\n        box-shadow: 0 0 10px #fff;\n    }\n    \n    h4 {\n        margin-bottom: 1rem;\n    }\n\n    .arrow {\n        position: absolute;\n        bottom: 1rem;\n        right: 1rem;\n        display: flex;\n        justify-content: flex-end;\n    }\n`;","export function authHeader() {\n    // return authorization header with basic auth credentials\n    let token = localStorage.getItem('token');\n\n\n    return {\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Access-Control-Allow-Headers\": \"Origin, Content-Type, X-Auth-Token\",\n        \"Access-Control-Allow-Methods\": \"GET\",\n        \"Content-Type\": \"application/json;charset=UTF-8\"\n    }\n}\n","import axios from 'axios';\nimport { authHeader } from './authHeader';\nimport https from 'https';\n\nconst Axios = axios.create({\n    baseURL: \"https://localhost/api\",\n    timeout: 3000,\n    headers: authHeader(),\n    httpsAgent: new https.Agent({  \n        rejectUnauthorized: false\n      })\n});\n\n\nexport const AxiosFIPE =  axios.create({\n  baseURL: \"http://veiculos.fipe.org.br/api\",\n  timeout: 3000,\n  headers: authHeader(),\n  httpsAgent: new https.Agent({  \n      rejectUnauthorized: false\n    })\n});\nexport default Axios;\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n    display: flex;\n    position: relative;\n    padding: 1rem 0;\n    flex-direction: column;\n    text-align: start;\n    label {\n        /* position: absolute; */\n        /* top: .5rem; */\n        /* left: 1rem; */\n        font-size: 0.9rem;\n        color: #fff;\n        font-weight: 700;\n        /* background: #37363c;    */\n    }\n    input {\n        background: #37363c;\n        border: 1px solid #fff;\n        color: #fff;\n        padding: 0.5rem 1rem;\n        border-radius: 0.5rem;\n        outline: none;\n        transition: border 0.5s;\n\n        &:focus, &:hover {\n            border: 1px solid rgba(255, 255, 255, 0.85);\n        }\n    }\n`;","import React from \"react\";\nimport { Container } from \"./styles\";\n\nfunction Input ({name, label, type, value, onChange, placeholder, required, disabled, className, style, id}) {\n    return (\n        <Container>\n            <label htmlFor={name}>{label}</label>\n            <input\n                id={id}\n                name={name}\n                type={type}\n                value={value}\n                onChange={onChange}\n                placeholder={placeholder}\n                required={required}\n                disabled={disabled}\n                className={className}\n                style={style}\n            />\n        </Container>\n    )\n};\n\nexport default Input;","import React, {useState} from \"react\";\nimport { Col, Row } from \"react-bootstrap\";\nimport { Navigate } from 'react-router';\nimport { Container } from \"./styles\";\n\nimport Axios from '../../helpers/Axios';\nimport Input from \"../../components/input\";\n\nexport default function SignIn() {\n    const [email, setEmail] = useState(null);\n    const [password, setPassword] = useState(null);\n\n    const token = localStorage.getItem('token')\n\n    const signIn = async () => {\n        await Axios.post(\"/auth/signin\", { email: email, password: password }).then(res => {\n            localStorage.setItem('token', res.data.Token);\n            window.location.reload();\n        }).catch(err =>{\n            console.log(err)\n            alert(\"Credenciais incorretas!\")\n        })\n    }\n\n    if (!token) {\n        return (\n            <Container className=\"container-lg\">\n                <Row>\n                    <Col md={15}>\n                        <Input\n                            name=\"email\"\n                            label=\"Email\"\n                            type=\"email\"\n                            value={email}\n                            placeholder=\"Digite seu Email\"\n                            onChange={(e) => setEmail(e.target.value)}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md={15}>\n                        <Input\n                            name=\"password\"\n                            label=\"Senha\"\n                            type=\"password\"\n                            value={password}\n                            placeholder=\"Digite sua senha\"\n                            onChange={(e) => setPassword(e.target.value)}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md={4}>\n                        <Row className=\"mt-4\">\n                            <Col md={{ span: 2, offset: 4 }}>\n                                <button onClick={signIn} class=\"btn btn-primary\">\n                                    Register\n                                </button>\n                            </Col>\n\n                        </Row>\n                    </Col>\n                </Row>\n            </Container>\n\n        )\n    } else {\n        alert(\"Você está logado!\")\n        return <Navigate to=\"/\" />\n    }\n}","import { createGlobalStyle } from \"styled-components\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nexport default createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    input:-webkit-autofill,\n    input:-webkit-autofill:hover,\n    input:-webkit-autofill:focus,\n    input:-webkit-autofill:active {\n    -webkit-box-shadow: 0 0 0 30px #2a2b2e inset !important;\n    }\n    input:-webkit-autofill{\n    -webkit-text-fill-color: white !important;\n    }\n  }\n  html{\n   scroll-behavior: smooth;\n   @media (max-width: 1080px) {\n      font-size: 93.75%;\n    }\n    @media (max-width: 720px) {\n      font-size: 87.5%;\n    }\n  }\n  body {\n    -webkit-font-smoothing: antialiased;\n    background: #090a10;\n    color: #fff;\n  }\n  html, body, #__next{\n    // height: 100%;\n    height: auto!important;\n    min-height: 100%;\n  }\n  body, input, button, textarea {\n    font-family: 'Roboto', sans-serif;\n  }\n  button{\n    cursor: pointer;\n    outline: none;\n    &:focus {\n      outline: transparent !important;\n    }\n  }\n  [disabled] {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n  ul {\n    list-style: none;\n  }\n  a {\n    text-decoration: none !important;\n  }\n  .react-modal-overlay {\n    background: rgba(0, 0, 0, 0.6);\n    position: fixed;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    left: 0;\n    z-index: 20;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 0 1rem;\n  }\n  .react-modal-content {\n    max-width: 879px;\n    width:100%;\n    background: linear-gradient(34.05deg, #101114 1.01%, #454652 100%);\n    box-shadow: 0px 4px 13px 1px rgba(0, 0, 0, 0.08);\n    padding: 2rem 4rem;\n    border-radius: 2rem;\n    position: relative;\n    @media (max-width: 768px){\n      padding:2rem;\n    }\n  }\n`;","import React from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport SignIn from './pages/signIn';\nimport GlobalStyles from './styles/global';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  const logOut = () => {\n    localStorage.clear();\n    window.location.reload();\n  }\n  return (\n\n    <div className=\"App\">\n      <Router>\n        <GlobalStyles />\n          <SignIn />\n        <Routes>\n          <Route path=\"/signin\" element={<SignIn />} />\n        </Routes>\n      </Router>\n    </div >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}